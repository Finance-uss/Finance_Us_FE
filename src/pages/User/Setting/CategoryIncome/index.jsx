import React, { useState, useEffect } from 'react';
import axiosInstance from '../../../../api/axiosInstance';
import styled from 'styled-components';
import BackHeader from '../../../../components/User/BackHeader';
import TopBar from '../../../../components/common/TopBar';
import CateContainer from '../../../../components/User/CateContainer';
import PlusCateButton from '../../../../components/User/PlusCateButton';
import CompleteButtonComponent from '../../../../components/User/CompleteButton';
import { useNavigate } from 'react-router-dom';

const CategoryIncomePage = () => {
    const navigate = useNavigate();
    const [selectedTab, setSelectedTab] = useState(1); 
    const [cateContainers, setCateContainers] = useState([]);
    const [errorMessage, setErrorMessage] = useState("");

    useEffect(() => {
        const storedToken = localStorage.getItem("token"); // Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        console.log("üü° ÌòÑÏû¨ Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞:", storedToken);

        if (!storedToken) {
            setErrorMessage("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
        } else {
            console.log("[CategoryIncomePage] fetchCategories Ïã§ÌñâÎê®!");
            fetchCategories(storedToken);
        }
    }, []);

    // APIÏóêÏÑú Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchCategories = async (storedToken) => {
        try {
            console.log("[CategoryIncomePage] Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂àÎü¨Ïò§Í∏∞ ÏöîÏ≤≠ ÏãúÏûë");
            const response = await axiosInstance.get(`/api/mypage/category`, {
                headers: { Authorization: `Bearer ${storedToken}` }, // ÌÜ†ÌÅ∞ Ï∂îÍ∞Ä
                params: { type: "income" }, // type Ï∂îÍ∞Ä
            });

            console.log("[CategoryIncomePage] API ÏùëÎãµ:", response.data);

            if (response.data.isSuccess) {
                console.log("[CategoryIncomePage] ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:", response.data.result);
                setCateContainers(response.data.result);
                setErrorMessage(""); // ÏóêÎü¨ Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî
            } else {
                setErrorMessage("Ïπ¥ÌÖåÍ≥†Î¶¨ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.");
            }
        } catch (error) {
            setErrorMessage("ÏÑúÎ≤Ñ ÏóêÎü¨Í∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.");
            console.error("Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", error);
        }
    };

    // ÎåÄÎ∂ÑÎ•ò Ï∂îÍ∞Ä API ÏöîÏ≤≠
    const addCateContainer = async () => {
        const newCategory = { name: "ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨", categoryType: "INCOME" };

        try {
            const storedToken = localStorage.getItem("token");
            const response = await axiosInstance.post("/api/mypage/category/main", newCategory, {
                headers: { Authorization: `Bearer ${storedToken}` },
            });

            if (response.data.isSuccess) {
                const newCategoryData = response.data.result;
                
                setCateContainers(prev => [...prev, newCategoryData]); 
                console.log("ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞ÄÎê®:", newCategoryData);
            } else {
                setErrorMessage("Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
            }
        } catch (error) {
            setErrorMessage("Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Ï∂îÍ∞ÄÌïòÎäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
            console.error("Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä Ïã§Ìå®:", error);
        }
    };

    // ÎåÄÎ∂ÑÎ•ò ÏÇ≠Ï†ú API ÏöîÏ≤≠
    const handleRemoveMainCategory = async (categoryId) => {
        const storedToken = localStorage.getItem("token");
        try {
            const response = await axiosInstance.delete(`/api/mypage/category/main`, {
                headers: { Authorization: `Bearer ${storedToken}` },
                params: { mainId: categoryId },
            });

            if (response.data.isSuccess) {
                console.log("ÎåÄÎ∂ÑÎ•ò ÏÇ≠Ï†ú ÏÑ±Í≥µ:", categoryId);
                setCateContainers(prev => prev.filter(category => category.id !== categoryId));
            } else {
                console.error("ÎåÄÎ∂ÑÎ•ò ÏÇ≠Ï†ú Ïã§Ìå®:", response.data.message);
            }
        } catch (error) {
            console.error("ÎåÄÎ∂ÑÎ•ò ÏÇ≠Ï†ú ÏöîÏ≤≠ Ïã§Ìå®:", error);
        }
    };

    const handleBackClick = () => {
        navigate('/user');
    };

    // ÌÉ≠ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleTabClick = (index) => {
        setSelectedTab(index);
        if (index === 0) {
            navigate("/user/expense-category");
        } else {
            navigate("/user/income-category");
            const storedToken = localStorage.getItem("token");
            fetchCategories(storedToken); 
        }
    };

    return (
        <CategoryPageContainer>
            <FixedHeaderWrapper>
                <BackHeaderWrapper>
                    <BackHeader title="Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï" onBackClick={handleBackClick} />
                </BackHeaderWrapper>
                <TopBarWrapper>
                <TopBar
                    leftText="ÏßÄÏ∂ú"
                    rightText="ÏàòÏùµ"
                    onTabClick={handleTabClick}
                    selectedTab={selectedTab}
                />
                </TopBarWrapper>
            </FixedHeaderWrapper>
            <ContentWrapper>
                {/* ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú */}
                {errorMessage && <ErrorText>{errorMessage}</ErrorText>}

                {/* CateContainer Î†åÎçîÎßÅ (ÎåÄÎ∂ÑÎ•ò & ÏÜåÎ∂ÑÎ•ò) */}
                {cateContainers.map((container) => (
                    <CateContainer
                        key={container.id}
                        id={container.id}
                        title={container.name} // ÎåÄÎ∂ÑÎ•ò Ïù¥Î¶Ñ
                        subcategories={container.subCategories} 
                        onRemove={() => handleRemoveMainCategory(container.id)}
                        isAssetPage={false} 
                    />
                ))}
                {/* PlusCateButton Î†åÎçîÎßÅ */}
                <PlusCateButtonWrapper>
                    <PlusCateButton onClick={addCateContainer} />
                </PlusCateButtonWrapper>
            </ContentWrapper>
            <CompleteButtonComponent label="ÏàòÏùµ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï ÏôÑÎ£å" />
        </CategoryPageContainer>
    );
};

export default CategoryIncomePage;

const CategoryPageContainer = styled.div`
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow-x: hidden;
    overflow-y: hidden;
`;

const FixedHeaderWrapper = styled.div`
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 10;
    background-color: white;
`;

const BackHeaderWrapper = styled.div`
    padding: 0 20px;
`;

const TopBarWrapper = styled.div`
    position: absolute;
    width: calc(100% - 40px);
    padding: 0 20px; 
`;

const ContentWrapper = styled.div`
    margin-top: 156px;
    display: flex;
    flex-direction: column;
    gap: 40px;
    padding: 0 20px;
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;
    padding-bottom: 120px;
`;

const PlusCateButtonWrapper = styled.div`
    display: flex;
    justify-content: center;
    margin-top: 0;
`;

const ErrorText = styled.p`
    color: red;
    text-align: center;
    font-size: 14px;
    margin-bottom: 20px;
`;